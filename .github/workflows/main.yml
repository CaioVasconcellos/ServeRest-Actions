name: ServeRest Test Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Using JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build Maven Project
        run: mvn clean install -DskipTests

      - name: Armazenar build como artefato
        uses: actions/upload-artifact@v4
        with:
          name: projeto-buildado
          path: target/


  health-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4



      - name: Executar teste Health Check
        run: mvn -Dtest="com.vemser.rest.tests.healthCheck.HealthCheckTest" test

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-buildado
          path: target/

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-health-check
          path: target/

  contrato-test:
    runs-on: ubuntu-latest
    needs: health-check
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      #      - name: Testes de Schema (Contrato)
      #        run: mvn test -Dgroups=schema

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-health-check
          path: target/

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-contrato-test
          path: target/

  funcional-test:
    runs-on: ubuntu-latest
    needs: contrato-test
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      #      - name: Testes Funcionais
      #        run: mvn test -DexcludedGroups=schema
      #        continue-on-error: false

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-contrato-test
          path: target/

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-funcional-test
          path: target/

  relatorio-allure:
    permissions:
      actions: read
      contents: write


    runs-on: ubuntu-latest
    needs: [ build, health-check, contrato-test, funcional-test ]
    if: always()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Baixar build do job anterior
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if ! gh run download -n projeto-funcional-test -D target/; then
            if ! gh run download -n projeto-contrato-test -D target/; then
              gh run download -n projeto-health-check -D target/
            fi
          fi

      - name: Sincronizar com o repositório remoto
        run: |
          git pull origin main --rebase  # Realiza o pull para garantir que o repositório local esteja atualizado

      - name: Gerar relatório Allure
        if: always()
        run: |
          mvn allure:report
          mvn allure: serve&
          sleep 5
          pkill -f allure
        continue-on-error: true

      - name: Configurar acesso ao repositório
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/CaioVasconcellos/ServeRest-Actions.git


      - name: Adicionar novo histórico do Allure sem deletar o anterior
        if: always()
        run: |
          mkdir -p ./allure-history
          if [ -d "target/site/allure-maven-plugin/history" ]; then
            echo "Histórico já existente encontrado, copiando e mantendo o histórico atual..."
            cp -r target/site/allure-maven-plugin/history/* ./allure-history/
          fi
          
          #Atualiza o diretório allure-history fora de target com os novos dados
          echo "Atualizando o diretório de histórico fora do target..."
          cp -r target/site/allure-maven-plugin/history/* ./allure-history/ || true
          
          # Cria o diretório de histórico dentro de target para publicação, se não existir
          mkdir -p ./target/site/allure-maven-plugin/allure-history
          
          # Substitui o histórico dentro de target com o histórico atualizado
          echo "Atualizando o diretório de histórico dentro do target para publicação..."
          cp -r ./allure-history/* ./target/site/allure-maven-plugin/allure-history/
          
          #Adc history em results
          echo "Adiciona history em results..."
          if [[ -e ./allure-history ]]; then
          if [[ -e ./allure-results/history ]]; then
          rm -rf ./allure-results/history
          fi
          mv ./allure-history ./allure-results/history
          fi
          
          # Configura o Git para o commit
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Adiciona os arquivos de histórico para o Git
          git add ./allure-history
          
          # Verifica se houve alteração no histórico e faz o commit se necessário
          if git diff --cached --quiet; then
            echo "Nenhuma mudança no histórico do Allure. Nada para commit."
          else
            git commit -m "Atualizando o histórico do Allure no GitHub Pages"
            git push origin main
            echo "Push realizado com sucesso!"
          fi
          
          # Verifica o conteúdo do diretório antes do commit
          echo "Conteúdo do diretório de publicação:"
          ls -l ./target/site/allure-maven-plugin/allure-history/
          
          


      - name: Garantir que o diretório existe
        run: |
          if [ ! -d "./target/site/allure-maven-plugin" ]; then
            echo "O diretório não existe. Criando a estrutura de diretórios..."
            mkdir -p ./target/site/allure-maven-plugin
          fi

      - name: Publicar no GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: ./target/site/allure-maven-plugin




  #  codeql-analysis:
  #      runs-on: ubuntu-latest
  #      permissions:
  #        actions: read
  #        contents: read
  #        security-events: write
  #
  #      strategy:
  #        fail-fast: false
  #        matrix:
  #          language: ['java']
  #
  #      steps:
  #        - name: Check out repository
  #          uses: actions/checkout@v4
  #
  #        - name: Initialize CodeQL
  #          uses: github/codeql-action/init@v3
  #          with:
  #            languages: ${{ matrix.language }}
  #
  #        - name: Autobuild
  #          uses: github/codeql-action/autobuild@v3
  #
  #        - name: Perform CodeQL Analysis
  #          uses: github/codeql-action/analyze@v3

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Maven Project
        run: mvn clean install -DskipTests

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  notify-discord:
    runs-on: ubuntu-latest
    needs: [ build, health-check, contrato-test, funcional-test, sonarqube, relatorio-allure ]
    if: always()
    steps:
      - name: Definir cor da notificação
        run: |
          if [[ "${{ needs.build.result }}" == "success" && 
                "${{ needs.sonarqube.result }}" == "success" && 
                "${{ needs.contrato-test.result }}" == "success" && 
                "${{ needs.funcional-test.result }}" == "success" && 
                "${{ needs.relatorio-allure.result }}" == "success" ]]; then
            COLOR=3066993  
          else
            COLOR=15158332 
          fi
          echo "COLOR=$COLOR" >> $GITHUB_ENV

      - name: Notificar Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "username": "Megazord da Qualidade",
            "avatar_url": "https://cdn.discordapp.com/attachments/1341477241929859165/1341772925963079732/1666124032484.png?ex=67b736ea&is=67b5e56a&hm=4aa1569b8b40b5f0dbc6fa0af5694f65ad689bab5ea06c2902410b8182236dc0&",
            "embeds": [
              {
                "title": "🚀 Pipeline Concluído!",
                "description": "O pipeline foi executado e os resultados estão disponíveis abaixo e o link do allure no título.",
                "url": "https://caiovasconcellos.github.io/ServeRest-Actions/",
                "color": '${{ env.COLOR }}',
                 "fields": [
                  {
                    "name": "🔨 Build",
                    "value": "**${{ needs.build.result }}**",
                    "inline": true
                  },
                  {
                    "name": "🔎 Análise CodeQL",
                    "value": "**${{ needs.codeql-analysis.result }}**",
                    "inline": true
                  },
                  {
                    "name": "🩺 Health Check",
                    "value": "**${{ needs.sonarqube.result }}**",
                    "inline": true
                  },
                  {
                    "name": "📜 Testes de Contrato",
                    "value": "**${{ needs.contrato-test.result }}**",
                    "inline": true
                  },
                  {
                    "name": "🛠️ Testes Funcionais",
                    "value": "**${{ needs.funcional-test.result }}**",
                    "inline": true
                  },
                  {
                    "name": "📊 Relatório Allure",
                    "value": "**${{ needs.relatorio-allure.result }}**",
                    "inline": true
                  },
                  {
                    "name": "📂 Repositório",
                    "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                    "inline": false
                  },
                  {
                    "name": "🛎️ Evento",
                    "value": "**${{ github.event_name }}**",
                    "inline": true
                  },
                  {
                    "name": "🔗 Link para a execução",
                    "value": "[Clique aqui](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                    "inline": true
                  },
                  {
                    "name": "🧑‍💻 Atualizado por",
                    "value": "${{ github.actor }}",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "Equipe: Caio e Hector ️",
                  "icon_url": "https://img.icons8.com/?size=100&id=W0h7DwgCTpon&format=png&color=000000"
                },
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
              }
            ]
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
name: ServeRest Test Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Using JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build Maven Project
        run: mvn clean install -DskipTests

      - name: Armazenar build como artefato
        uses: actions/upload-artifact@v4
        with:
          name: projeto-buildado
          path: target/


  health-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-buildado
          path: target/

      - name: Executar teste Health Check
        run: mvn -Dtest="com.vemser.rest.tests.healthCheck.HealthCheckTest" test

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-health-check
          path: target/

  contrato-test:
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-health-check
          path: target/

      - name: Testes de Schema (Contrato)
        run: mvn test -Dgroups=schema

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-contrato-test
          path: target/

  funcional-test:
    runs-on: ubuntu-latest
    needs: contrato-test
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-contrato-test
          path: target/

      - name: Testes Funcionais
        run: mvn test -DexcludedGroups=schema
        continue-on-error: false

      - name: Armazenar build como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projeto-funcional-test
          path: target/

  relatorio-allure:
    runs-on: ubuntu-latest
    needs: [ build, health-check, contrato-test, funcional-test]
    if: always()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Baixar build do job anterior
        uses: actions/download-artifact@v4
        with:
          name: projeto-funcional-test
          path: target/

      - name: Gerar relat√≥rio Allure
        if: always()
        run: |
          mvn allure:report
          mvn allure: serve&
          sleep 5
          pkill -f allure
        continue-on-error: true

      - name: Publicar no GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: ./target/site/allure-maven-plugin

  codeql-analysis:
      runs-on: ubuntu-latest
      permissions:
        actions: read
        contents: read
        security-events: write

      strategy:
        fail-fast: false
        matrix:
          language: ['java']

      steps:
        - name: Check out repository
          uses: actions/checkout@v4

        - name: Initialize CodeQL
          uses: github/codeql-action/init@v3
          with:
            languages: ${{ matrix.language }}

        - name: Autobuild
          uses: github/codeql-action/autobuild@v3

        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v3

  notify-discord:
    runs-on: ubuntu-latest
    needs: [ build, codeql-analysis, health-check, contrato-test, funcional-test, relatorio-allure ]
    if: always()
    steps:
      - name: Notificar Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
          curl -H "Content-Type: application/json" -X POST -d '{
          "username": "GitHub Actions üöÄ",
          "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [
            {
              "title": "üöÄ Pipeline Conclu√≠do!",
              "description": "O pipeline foi executado e os resultados est√£o dispon√≠veis abaixo.",
              "color": 3066993,
              "fields": [
                {
                  "name": "üî® Build",
                  "value": "**${{ needs.build.result }}**",
                  "inline": true
                },
                {
                  "name": "üîé An√°lise CodeQL",
                  "value": "**${{ needs.codeql-analysis.result }}**",
                  "inline": true
                },
                {
                  "name": "ü©∫ Health Check",
                  "value": "**${{ needs.health-check.result }}**",
                  "inline": true
                },
                {
                  "name": "üìú Testes de Contrato",
                  "value": "**${{ needs.contrato-test.result }}**",
                  "inline": true
                },
                {
                  "name": "üõ†Ô∏è Testes Funcionais",
                  "value": "**${{ needs.funcional-test.result }}**",
                  "inline": true
                },
                {
                  "name": "üìä Relat√≥rio Allure",
                  "value": "**${{ needs.relatorio-allure.result }}**",
                  "inline": true
                },
                {
                  "name": "üìÇ Reposit√≥rio",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": false
                },
                {
                  "name": "üõéÔ∏è Evento",
                  "value": "**${{ github.event_name }}**",
                  "inline": true
                },
                {
                  "name": "üîó Link para a execu√ß√£o",
                  "value": "[Clique aqui](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": true
                }
              ],
              "footer": {
                "text": "Equipe: Caio e Hector üßô‚Äç‚ôÇÔ∏è",
                "icon_url": "https://cdn-icons-png.flaticon.com/512/163/163801.png"
              },
              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
            }
          ]
            }`${{ secrets.DISCORD_WEBHOOK }}
            
